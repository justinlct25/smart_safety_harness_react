// Skip to content
// GitLab
// Menu
// Search GitLab
// Help
// Justin Lo
// M
// muselabs-safetyHelmet
// Project information
// Repository
// Files
// Commits
// Branches
// Tags
// Contributors
// Graph
// Compare
// Issues
// 0
// Merge requests
// 0
// CI/CD
// Security & Compliance
// Deployments
// Monitor
// Infrastructure
// Packages & Registries
// Analytics
// Wiki
// Snippets
// Settings
// Collapse sidebar
// Shinji Hirota
// muselabs-safetyHelmet
// Repository
// main
// muselabs-safetyhelmet
// client
// src
// App.tsx
// Shinji Hirota's avatar
// fix setToDanger
// Shinji Hirota authored 3 months ago
// 5129e8c1
//  App.tsx  26.8 KB
// 1
// 2
// 3
// 4
// 5
// 6
// 7
// 8
// 9
// 10
// 11
// 12
// 13
// 14
// 15
// 16
// 17
// 18
// 19
// 20
// 21
// 22
// 23
// 24
// 25
// 26
// 27
// 28
// 29
// 30
// 31
// 32
// 33
// 34
// 35
// 36
// 37
// 38
// 39
// 40
// 41
// 42
// 43
// 44
// 45
// 46
// 47
// 48
// 49
// 50
// 51
// 52
// 53
// 54
// 55
// 56
// 57
// 58
// 59
// 60
// 61
// 62
// 63
// 64
// 65
// 66
// 67
// 68
// 69
// 70
// 71
// 72
// 73
// 74
// 75
// 76
// 77
// 78
// 79
// 80
// 81
// 82
// 83
// 84
// 85
// 86
// 87
// 88
// 89
// 90
// 91
// 92
// 93
// 94
// 95
// 96
// 97
// 98
// 99
// 100
// 101
// 102
// 103
// 104
// 105
// 106
// 107
// 108
// 109
// 110
// 111
// 112
// 113
// 114
// 115
// 116
// 117
// 118
// 119
// 120
// 121
// 122
// 123
// 124
// 125
// 126
// 127
// 128
// 129
// 130
// 131
// 132
// 133
// 134
// 135
// 136
// 137
// 138
// 139
// 140
// 141
// 142
// 143
// 144
// 145
// 146
// 147
// 148
// 149
// 150
// 151
// 152
// 153
// 154
// 155
// 156
// 157
// 158
// 159
// 160
// 161
// 162
// 163
// 164
// 165
// 166
// 167
// 168
// 169
// 170
// 171
// 172
// 173
// 174
// 175
// 176
// 177
// 178
// 179
// 180
// 181
// 182
// 183
// 184
// 185
// 186
// 187
// 188
// 189
// 190
// 191
// 192
// 193
// 194
// 195
// 196
// 197
// 198
// 199
// 200
// 201
// 202
// 203
// 204
// 205
// 206
// 207
// 208
// 209
// 210
// 211
// 212
// 213
// 214
// 215
// 216
// 217
// 218
// 219
// 220
// 221
// 222
// 223
// 224
// 225
// 226
// 227
// 228
// 229
// 230
// 231
// 232
// 233
// 234
// 235
// 236
// 237
// 238
// 239
// 240
// 241
// 242
// 243
// 244
// 245
// 246
// 247
// 248
// 249
// 250
// 251
// 252
// 253
// 254
// 255
// 256
// 257
// 258
// 259
// 260
// 261
// 262
// 263
// 264
// 265
// 266
// 267
// 268
// 269
// 270
// 271
// 272
// 273
// 274
// 275
// 276
// 277
// 278
// 279
// 280
// 281
// 282
// 283
// 284
// 285
// 286
// 287
// 288
// 289
// 290
// 291
// 292
// 293
// 294
// 295
// 296
// 297
// 298
// 299
// 300
// 301
// 302
// 303
// 304
// 305
// 306
// 307
// 308
// 309
// 310
// 311
// 312
// 313
// 314
// 315
// 316
// 317
// 318
// 319
// 320
// 321
// 322
// 323
// 324
// 325
// 326
// 327
// 328
// 329
// 330
// 331
// 332
// 333
// 334
// 335
// 336
// 337
// 338
// 339
// 340
// 341
// 342
// 343
// 344
// 345
// 346
// 347
// 348
// 349
// 350
// 351
// 352
// 353
// 354
// 355
// 356
// 357
// 358
// 359
// 360
// 361
// 362
// 363
// 364
// 365
// 366
// 367
// 368
// 369
// 370
// 371
// 372
// 373
// 374
// 375
// 376
// 377
// 378
// 379
// 380
// 381
// 382
// 383
// 384
// 385
// 386
// 387
// 388
// 389
// 390
// 391
// 392
// 393
// 394
// 395
// 396
// 397
// 398
// 399
// 400
// 401
// 402
// 403
// 404
// 405
// 406
// 407
// 408
// 409
// 410
// 411
// 412
// 413
// 414
// 415
// 416
// 417
// 418
// 419
// 420
// 421
// 422
// 423
// 424
// 425
// 426
// 427
// 428
// 429
// 430
// 431
// 432
// 433
// 434
// 435
// 436
// 437
// 438
// 439
// 440
// 441
// 442
// 443
// 444
// 445
// 446
// 447
// 448
// 449
// 450
// 451
// 452
// 453
// 454
// 455
// 456
// 457
// 458
// 459
// 460
// 461
// 462
// 463
// 464
// 465
// 466
// 467
// 468
// 469
// 470
// 471
// 472
// 473
// 474
// 475
// 476
// 477
// 478
// 479
// 480
// 481
// 482
// 483
// 484
// 485
// 486
// 487
// 488
// 489
// 490
// 491
// 492
// 493
// 494
// 495
// 496
// 497
// 498
// 499
// 500
// 501
// 502
// 503
// 504
// 505
// 506
// 507
// 508
// 509
// 510
// 511
// 512
// 513
// 514
// 515
// 516
// 517
// 518
// 519
// 520
// 521
// 522
// 523
// 524
// 525
// 526
// 527
// 528
// 529
// 530
// 531
// 532
// 533
// 534
// 535
// 536
// 537
// 538
// 539
// 540
// 541
// 542
// 543
// 544
// 545
// 546
// 547
// 548
// 549
// 550
// 551
// 552
// 553
// 554
// 555
// 556
// 557
// 558
// 559
// 560
// 561
// 562
// 563
// 564
// 565
// 566
// 567
// 568
// 569
// 570
// 571
// 572
// 573
// 574
// 575
// 576
// 577
// 578
// 579
// 580
// 581
// 582
// 583
// 584
// 585
// 586
// 587
// 588
// 589
// 590
// 591
// 592
// 593
// 594
// 595
// 596
// 597
// 598
// 599
// 600
// 601
// 602
// 603
// 604
// 605
// 606
// 607
// 608
// 609
// 610
// 611
// 612
// 613
// 614
// 615
// 616
// 617
// 618
// 619
// 620
// 621
// 622
// 623
// 624
// 625
// 626
// 627
// 628
// 629
// 630
// 631
// 632
// 633
// 634
// 635
// 636
// 637
// 638
// 639
// 640
// 641
// 642
// 643
// 644
// 645
// 646
// 647
// 648
// 649
// 650
// 651
// 652
// 653
// 654
// 655
// 656
// 657
// 658
// 659
// 660
// 661
// 662
// 663
// 664
// 665
// 666
// 667
// 668
// 669
// 670
// 671
// 672
// 673
// 674
// 675
// 676
// 677
// 678
// 679
// 680
// 681
// 682
// 683
// 684
// 685
// 686
// 687
// 688
// 689
// 690
// 691
// 692
// 693
// 694
// 695
// 696
// 697
// 698
// 699
// 700
// 701
// 702
// 703
// 704
// 705
// 706
// 707
// 708
// 709
// 710
// 711
// 712
// 713
// 714
// 715
// 716
// 717
// 718
// 719
// 720
// 721
// 722
// 723
// 724
// 725
// 726
// 727
// 728
// 729
// 730
// 731
// 732
// 733
// 734
// 735
// 736
// 737
// 738
// 739
// 740
// 741
// 742
// 743
// 744
// 745
// 746
// 747
// 748
// 749
// 750
// 751
// 752
// 753
// 754
// 755
// 756
// 757
// 758
// 759
// 760
// 761
// 762
// 763
// 764
// 765
// 766
// 767
// 768
// 769
// 770
// 771
// 772
// 773
// 774
// 775
// 776
// 777
// 778
// 779
// 780
// 781
// 782
// 783
// 784
// 785
// 786
// 787
// 788
// 789
// 790
// 791
// 792
// 793
// 794
// 795
// 796
// 797
// 798
// 799
// 800
// 801
// 802
// 803
// 804
// 805
// 806
// 807
// 808
// 809
// 810
// 811
// 812
// 813
// 814
// 815
// 816
// 817
// 818
// 819
// 820
// 821
// 822
// 823
// 824
// 825
// 826
// 827
// 828
// 829
// 830
// 831
// 832
// 833
// 834
// 835
// 836
// 837
// 838
// 839
// 840
// 841
// 842
// 843
// 844
// 845
// 846
// 847
// 848
// 849
// 850
// 851
// 852
// 853
// 854
// 855
// 856
// 857
// 858
// 859
// 860
// 861
// 862
// 863
// 864
// 865
// 866
// 867
// 868
// 869
// 870
// 871
// 872
// 873
// 874
// 875
// 876
// 877
// 878
// 879
// 880
// 881
// 882
// 883
// 884
// 885
// 886
// 887
// 888
// 889
// import "@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css";
// import MQTT, { AsyncMqttClient } from "async-mqtt";
// import { parse, stringify } from "flatted";
// import {
//   Feature as GeoJsonFeature,
//   FeatureCollection,
//   Point,
//   Polygon,
// } from "geojson";
// import { LngLat } from "mapbox-gl";
// import "mapbox-gl/dist/mapbox-gl.css";
// import "mapbox-gl/src/css/mapbox-gl.css";
// import React from "react";
// import ReactMapboxGl, { Feature, Layer, Popup } from "react-mapbox-gl";
// import DrawControl from "react-mapbox-gl-draw";
// import "./App.css";
// import styles from "./App.module.scss";
// import { CompanyName } from "./components/CompanyName";
// import {
//   DangerIcon,
//   FocusButton,
//   MenuIcon,
//   RightArrowIcon,
//   StayIcon,
// } from "./components/Icons";
// import ModalContent, { SecondModalContent } from "./components/ModalContent";
// import "./global.scss";
// import { mockUpDots } from "./mockUpDots";
// import { isMobile } from "./utils/isMobile";
// import { MQTTHelmetMessage } from "./utils/mqtt";
// import {
//   isMapboxFeatureCollection,
//   isMQTTHelmetMessage,
//   MapboxFeatureCollection,
//   MQTTHelmetMessageToGeoJson,
//   pointInPolygon,
// } from "./utils/utils";
// // import music from "./alertSound.wav";
// import audio from "./alertSound.mp3";
// const MAP_WIDTH = "100vw";
// const MAP_HEIGHT = "70vh";
// const DANGER_VALUE = 70000;
// const STAY_STILL_VALUE = 1000;
// const CAL_ARRAY_LENGTH = 100; //time 1 message = 100ms; 10 message = 1sec; 100 message = 10sec; 1000message = FOREVER
// const Map = ReactMapboxGl({
//   accessToken: process.env.REACT_APP_MAPBOX_TOKEN!,
// });
// interface AppState {
//   focusedSelf: boolean;
//   myCurrentPosition: LngLat;
//   mapCenter: [number, number];
//   mapZoom: [number];
//   data: FeatureCollection<
//     Point,
//     Omit<MQTTHelmetMessage, "lngLat"> & { inDanger: boolean }
//   >;
//   existingFeatures: MapboxFeatureCollection | null;
//   workerTabToggled: boolean;
//   client?: AsyncMqttClient;
//   isDetermining: boolean;
//   isInDanger: boolean;
//   isStayStill: boolean;
//   popUp?: {
//     id?: string;
//     name?: string;
//     isActive?: boolean;
//     temperature?: string;
//   };
//   modal?: {
//     icon: React.ReactNode;
//     topic: string;
//     isOpen: boolean;
//   };
//   motionSumArray: number[];
//   totalMsgCounter: number;
//   dtmMsgCounter: number;
//   secondModalIsOpen: boolean;
//   isDarkMode: boolean;
// }
// class App extends React.Component<{}, AppState> {
//   drawControl: DrawControl | null = null;
//   constructor(props: {}) {
//     super(props);
//     this.state = {
//       focusedSelf: true,
//       myCurrentPosition: new LngLat(114.21764149792617, 22.31502429405124),
//       mapCenter: [114.21764149792617, 22.31502429405124],
//       mapZoom: [18],
//       // data: [],
//       data: {
//         type: "FeatureCollection",
//         features: mockUpDots.map((i) => {
//           const { id, lngLat, ...rest } = i;
//           return {
//             type: "Feature",
//             geometry: {
//               type: "Point",
//               coordinates: [i.lngLat.lng, i.lngLat.lat],
//             },
//             id: i.id,
//             properties: {
//               ...rest,
//               inDanger: false,
//             },
//           };
//         }),
//       },
//       existingFeatures: null,
//       workerTabToggled: false,
//       isDetermining: false,
//       isInDanger: false,
//       isStayStill: false,
//       motionSumArray: [],
//       totalMsgCounter: 0,
//       dtmMsgCounter: 0,
//       popUp: {
//         id: "234567",
//         isActive: false,
//         name: "Demo - Mr Chan",
//         temperature: "35.5",
//       },
//       secondModalIsOpen: false,
//       isDarkMode: false,
//     };
//     navigator.geolocation.watchPosition(
//       (position) => {
//         this.setState({
//           myCurrentPosition: new LngLat(
//             position.coords.longitude,
//             position.coords.latitude
//           ),
//         });
//       },
//       (error) => console.error(error),
//       { enableHighAccuracy: true }
//     );
//     MQTT.connectAsync(process.env.REACT_APP_MQTT_BROKER_URL)
//       .then((c) => {
//         console.log(c);
//         this.setState({ client: c });
//         console.log("Connected to MQTT broker!");
//         c.subscribe("/watch/+");
//         c.on("message", (topic, payload) => {
//           try {
//             if (this.state.isInDanger) {
//               return;
//             }
//             const id = topic.match("difference")?.[0];
//             if (id) {
//               const motionSum = parseInt(
//                 new TextDecoder("utf-8").decode(payload)
//               );
//               // if (motionSum > DANGER_VALUE) console.log(motionSum);
//               if (motionSum > DANGER_VALUE) this.setToDanger();
//               if (this.state.isDetermining) {
//                 this.setState({
//                   totalMsgCounter: this.state.totalMsgCounter + 1,
//                 });
//                 if (
//                   (this.state.isStayStill && motionSum > 1000) ||
//                   (!this.state.isStayStill && motionSum < 1000)
//                 ) {
//                   // if (motionSum > DANGER_VALUE) {
//                   //   this.setToDanger();
//                   // }
//                   this.setState({
//                     dtmMsgCounter: this.state.dtmMsgCounter + 1,
//                   });
//                 }
//                 this.determineStatus();
//               }
//               if (!this.state.isDetermining && motionSum > DANGER_VALUE) {
//                 this.setToDanger();
//               } else if (
//                 !this.state.isDetermining &&
//                 motionSum < STAY_STILL_VALUE
//               ) {
//                 this.setState({ isDetermining: true });
//               }
//               if (this.state.isInDanger) {
//                 // should be manually deactivated.
//               }
//               //*USEFUL~ DO NOT DELETE AH 7 TAU!!!!
//               //*USEFUL~ DO NOT DELETE AH 7 TAU!!!!
//               //*USEFUL~ DO NOT DELETE AH 7 TAU!!!!
//               // const parsedMsg = JSON.parse(payload.toString());
//               // if (isMQTTHelmetMessage(parsedMsg)) {
//               //   const idx = this.state.data.features.findIndex(
//               //     (i) => i.id === id
//               //   );
//               //   const geojson = MQTTHelmetMessageToGeoJson(parsedMsg, id);
//               //   this.setState(
//               //     {
//               //       data: {
//               //         ...this.state.data,
//               //         features:
//               //           idx === -1
//               //             ? [...this.state.data.features, geojson]
//               //             : [
//               //                 ...this.state.data.features.slice(0, idx),
//               //                 geojson,
//               //                 ...this.state.data.features.slice(idx + 1),
//               //               ],
//               //       },
//               //     },
//               //     () => this.checkIntersection(geojson)
//               //   );
//               // } else {
//               //   throw new Error(`Invalid MQTT message: ${payload.toString()}`);
//               // }
//               //*USEFUL~ DO NOT DELETE AH 7 TAU!!!!
//               //*USEFUL~ DO NOT DELETE AH 7 TAU!!!!
//               //*USEFUL~ DO NOT DELETE AH 7 TAU!!!!
//             } else {
//               throw new Error(`Invalid MQTT topic ${topic}`);
//             }
//           } catch (error) {
//             console.error(error);
//           }
//         });
//         c.on("disconnect", () => console.log("Disconnected from MQTT broker."));
//       })
//       .catch((e) => console.error(e));
//   }
//   componentWillUnmount() {
//     this.state.client?.end();
//   }
//   handleShapesModification(geojson: MapboxFeatureCollection) {
//     delete (geojson as any).target;
//     console.log(`Performing ${geojson.type} action with:`);
//     console.log(geojson);
//     if (geojson.type !== "draw.create" && !this.state.existingFeatures) {
//       console.warn(
//         `No features are tracked but a ${geojson.type} action occurred.`
//       );
//       return;
//     }
//     const modifiedUntracked = () => {
//       console.warn(
//         `A ${geojson.type} action occurred on an untracked shape.\nTracked shapes at evaluation:`
//       );
//       console.log(this.state.existingFeatures);
//     };
//     let stateSet = false,
//       isDeletion = false;
//     switch (geojson.type) {
//       case "draw.create":
//         this.setState(
//           {
//             existingFeatures: this.state.existingFeatures
//               ? {
//                   ...this.state.existingFeatures,
//                   features: this.state.existingFeatures.features.concat(
//                     geojson.features
//                   ),
//                 }
//               : { ...geojson, type: "FeatureCollection" },
//           },
//           () => (stateSet = true)
//         );
//         break;
//       case "draw.update":
//         const idx = this.state.existingFeatures!.features.findIndex(
//           (i) => i.id === geojson.features[0].id
//         );
//         if (idx !== -1) {
//           this.setState(
//             {
//               existingFeatures: {
//                 ...this.state.existingFeatures!,
//                 features: [
//                   ...this.state.existingFeatures!.features.slice(0, idx),
//                   geojson.features[0],
//                   ...this.state.existingFeatures!.features.slice(idx + 1),
//                 ],
//               },
//             },
//             () => (stateSet = true)
//           );
//         } else {
//           modifiedUntracked();
//           return;
//         }
//         break;
//       case "draw.delete":
//         isDeletion = true;
//         this.setState(
//           {
//             existingFeatures: {
//               ...this.state.existingFeatures!,
//               features: this.state.existingFeatures!.features.filter(
//                 (i) => i.id !== geojson.features[0].id
//               ),
//             },
//           },
//           () => (stateSet = true)
//         );
//         break;
//       default:
//         stateSet = true;
//         break;
//     }
//     const complete = () => {
//       if (stateSet) {
//         console.log("Modified with the following result:");
//         console.log(this.state.existingFeatures);
//         localStorage.setItem(
//           "features",
//           stringify(this.state.existingFeatures)
//         );
//         if (!isDeletion) {
//           this.checkIntersection(
//             geojson.features[0] as GeoJsonFeature<Polygon>
//           );
//         }
//       } else {
//         requestAnimationFrame(complete);
//       }
//     };
//     complete();
//   }
//   checkIntersection(updatedObject: GeoJsonFeature<Polygon | Point>) {
//     if (updatedObject.geometry.type === "Polygon") {
//       const geojson = updatedObject as GeoJsonFeature<Polygon>;
//       let prevFeatures = this.state.data.features;
//       for (let i = 0; i < prevFeatures.length; i++) {
//         prevFeatures[i].properties.inDanger = pointInPolygon(
//           prevFeatures[i],
//           geojson
//         );
//       }
//       this.setState({ data: { ...this.state.data, features: prevFeatures } });
//     } else {
//       const geojson = updatedObject as GeoJsonFeature<Point>;
//       if (this.state.existingFeatures) {
//         const idx = this.state.existingFeatures.features.findIndex(
//           (feature) => feature.id && feature.id === geojson.id
//         );
//         if (idx !== -1) {
//           let prevData = this.state.data;
//           prevData.features[idx].properties.inDanger =
//             this.state.existingFeatures.features.some((feature) =>
//               pointInPolygon(
//                 this.state.data.features[idx],
//                 feature as GeoJsonFeature<Polygon>
//               )
//             );
//           this.setState({ data: prevData });
//         }
//       }
//     }
//   }
//   determineStatus() {
//     if (this.state.totalMsgCounter > CAL_ARRAY_LENGTH) {
//       if (this.state.dtmMsgCounter > CAL_ARRAY_LENGTH / 2) {
//         this.state.isStayStill ? this.setInMotion() : this.setStayStill();
//       } else {
//         this.state.isStayStill ? this.setStayStill() : this.setInMotion();
//       }
//     }
//   }
//   setToDanger() {
//     this.setState({
//       isInDanger: true,
//       isStayStill: false,
//       workerTabToggled: true,
//       popUp: {
//         ...this.state.popUp,
//         isActive: true,
//         temperature: "36.5",
//       },
//       mapCenter: [
//         this.state.myCurrentPosition.lng,
//         this.state.myCurrentPosition.lat,
//       ],
//       modal: {
//         icon: <DangerIcon />,
//         topic: "偵察到自由下墜",
//         isOpen: true,
//       },
//     });
//     // doesn't work in mobile
//     // new Audio(audio).play();
//   }
//   exitFromDanger() {
//     this.setState({
//       isInDanger: false,
//       workerTabToggled: false,
//       popUp: {
//         ...this.state.popUp,
//         isActive: false,
//         temperature: "35.5",
//       },
//     });
//   }
//   setStayStill() {
//     this.setState({
//       workerTabToggled: true,
//       popUp: {
//         ...this.state.popUp,
//         isActive: false,
//         temperature: "36.4",
//       },
//       mapCenter: [
//         this.state.myCurrentPosition.lng,
//         this.state.myCurrentPosition.lat,
//       ],
//       modal: {
//         icon: <StayIcon />,
//         topic: "脫帽提示",
//         isOpen: true,
//       },
//       motionSumArray: [],
//       totalMsgCounter: 0,
//       dtmMsgCounter: 0,
//       isStayStill: true,
//     });
//   }
//   setInMotion() {
//     this.setState({
//       workerTabToggled: false,
//       motionSumArray: [],
//       isStayStill: false,
//       isInDanger: false,
//       isDetermining: false,
//       totalMsgCounter: 0,
//       dtmMsgCounter: 0,
//     });
//   }
//   render() {
//     return (
//       <div id={styles.app}>
//         <div id={styles.title}>
//           <CompanyName />
//         </div>
//         <div>
//           <div
//             style={{
//               zIndex: 1,
//               position: "absolute",
//               display: "flex",
//               justifyContent: "center",
//               left: "50%",
//               transform: "translateX(-50%)",
//             }}
//           >
//             <p
//               style={{
//                 cursor: "pointer",
//                 background: this.state.isDarkMode ? "#306ef4AA" : "#306ef4",
//                 padding: "4px",
//                 width: "140px",
//                 borderRadius: "4px 0 0 4px",
//                 color: !this.state.isDarkMode ? "#EEE" : "#CCC",
//                 transition: "all 0.4s",
//                 border: "solid 1px #444",
//                 textShadow: !this.state.isDarkMode
//                   ? "0 0 10px #FFF"
//                   : "0 0 0 #FFF",
//               }}
//               onClick={() => this.setState({ isDarkMode: false })}
//             >
//               BRIGHT
//             </p>
//             <p
//               style={{
//                 cursor: "pointer",
//                 padding: "4px",
//                 width: "140px",
//                 borderRadius: "0px 4px 4px 0px",
//                 background: !this.state.isDarkMode ? "#306ef4AA" : "#306ef4",
//                 color: !this.state.isDarkMode ? "#CCC" : "#EEE",
//                 transition: "all 0.4s",
//                 border: "solid 1px #444",
//                 textShadow: this.state.isDarkMode
//                   ? "0 0 10px #FFF"
//                   : "0 0 0 #FFF",
//               }}
//               onClick={() => this.setState({ isDarkMode: true })}
//             >
//               DARK
//             </p>
//           </div>
//           <Map
//             // eslint-disable-next-line react/style-prop-object
//             style={
//               this.state.isDarkMode
//                 ? "mapbox://styles/shinji1129/ckqyxuv0lcfmn18o9pgzhwgq4"
//                 : "mapbox://styles/shinji1129/ckr4d9iy60ci317mte2mzob6k"
//             }
//             // style="mapbox://styles/shinji1129/ckqyxuv0lcfmn18o9pgzhwgq4"
//             containerStyle={{
//               height: MAP_HEIGHT,
//               width: MAP_WIDTH,
//             }}
//             zoom={this.state.mapZoom}
//             center={
//               this.state.focusedSelf
//                 ? [
//                     this.state.myCurrentPosition.lng,
//                     this.state.myCurrentPosition.lat,
//                   ]
//                 : this.state.mapCenter
//             }
//             onStyleLoad={() => {
//               const str = localStorage.getItem("features");
//               if (str) {
//                 try {
//                   const geojson = parse(str);
//                   if (isMapboxFeatureCollection(geojson)) {
//                     console.log(
//                       "Fetched the following geojson from local storage:"
//                     );
//                     console.log(geojson);
//                     this.setState({ existingFeatures: geojson });
//                     // (this.state.drawControl.current?.draw as any).add(geojson);
//                     (this.drawControl?.draw as any).add(geojson);
//                     for (const feature of this.state.existingFeatures!
//                       .features) {
//                       this.checkIntersection(
//                         feature as GeoJsonFeature<Polygon>
//                       );
//                     }
//                   } else {
//                     throw new Error(
//                       "Saved object is not of type FeatureCollection."
//                     );
//                   }
//                 } catch (error) {
//                   console.log(error);
//                   localStorage.removeItem("features");
//                 }
//               }
//             }}
//             onDrag={(e) =>
//               this.setState({
//                 focusedSelf: false,
//                 mapCenter: [e.getCenter().lng, e.getCenter().lat],
//                 mapZoom: [e.getZoom()],
//               })
//             }
//           >
//             {/* <div className="mapMenu">
//               <MenuIcon
//                 isOpen={this.state.workerTabToggled}
//                 setIsOpen={(value) =>
//                   this.setState({ workerTabToggled: value })
//                 }
//               />
//             </div> */}
//             <div
//               className="mapFocus"
//               onClick={() =>
//                 this.setState({
//                   focusedSelf: !this.state.focusedSelf,
//                   mapCenter: [
//                     this.state.myCurrentPosition.lng,
//                     this.state.myCurrentPosition.lat,
//                   ],
//                 })
//               }
//             >
//               <FocusButton isViewingMyself={this.state.focusedSelf} />
//             </div>
//             <DrawControl
//               ref={(drawControl) => (this.drawControl = drawControl)}
//               controls={{
//                 point: false,
//                 line_string: false,
//                 combine_features: false,
//                 uncombine_features: false,
//               }}
//               // styles={drawControlSetting}
//               onDrawCreate={(geojson: MapboxFeatureCollection) =>
//                 this.handleShapesModification(geojson)
//               }
//               onDrawDelete={(geojson: MapboxFeatureCollection) =>
//                 this.handleShapesModification(geojson)
//               }
//               onDrawUpdate={(geojson: MapboxFeatureCollection) =>
//                 this.handleShapesModification(geojson)
//               }
//             />
//             {this.state.popUp?.isActive ? (
//               <Popup
//                 style={{ cursor: "pointer" }}
//                 onClick={() => {
//                   this.setState({
//                     secondModalIsOpen: true,
//                     workerTabToggled: false,
//                   });
//                 }}
//                 offset={8}
//                 coordinates={[
//                   this.state.myCurrentPosition.lng,
//                   this.state.myCurrentPosition.lat,
//                 ]}
//               >
//                 <table>
//                   <h1>{"Staff ID: " + this.state.popUp?.id}</h1>
//                   <h1>{"Staff name: " + this.state.popUp?.name}</h1>
//                   <h1>{"Temperature: " + this.state.popUp?.temperature}</h1>
//                   <h1
//                     onClick={() => {
//                       this.setState({
//                         secondModalIsOpen: true,
//                         workerTabToggled: false,
//                       });
//                     }}
//                   >
//                     {"員工資料"}
//                   </h1>
//                 </table>
//               </Popup>
//             ) : (
//               <></>
//             )}
//             <Layer
//               type="circle"
//               paint={{
//                 "circle-opacity": 0.8,
//                 "circle-color": this.state.isInDanger
//                   ? "#FF6666"
//                   : this.state.isStayStill
//                   ? "#FCFF62"
//                   : "#00FFFF",
//                 "circle-radius":
//                   this.state.isInDanger ||
//                   this.state.isStayStill ||
//                   this.state.popUp?.isActive
//                     ? 16
//                     : 10,
//               }}
//             >
//               <Feature
//                 onMouseLeave={() =>
//                   this.setState({
//                     popUp: {
//                       ...this.state.popUp,
//                       isActive: false,
//                     },
//                   })
//                 }
//                 onMouseEnter={() => {
//                   this.setState({
//                     popUp: {
//                       ...this.state.popUp,
//                       isActive: true,
//                     },
//                   });
//                   // setPopupDetails({
//                   //   lngLat: event.lngLat,
//                   //   id: event.feature.id,
//                   //   properties: event.feature.properties,
//                   // });
//                   // setIsViewingMyself(true);
//                   // setMapCenter({
//                   //   longitude: myCurrentPosition!.longitude,
//                   //   latitude: myCurrentPosition!.latitude,
//                   // });
//                 }}
//                 onClick={() => {
//                   this.setState({
//                     secondModalIsOpen: true,
//                     workerTabToggled: false,
//                   });
//                 }}
//                 properties={{
//                   name: "RAND-0",
//                   heartRate: 90,
//                   temperature: 36.5,
//                   moving: false,
//                   fallen: false,
//                 }}
//                 coordinates={[
//                   this.state.myCurrentPosition.lng,
//                   this.state.myCurrentPosition.lat,
//                 ]}
//               />
//               {/* {this.state.data.features
//                 .filter((i) => !i.properties.inDanger)
//                 .map((i) => (
//                   <Feature
//                     coordinates={i.geometry.coordinates}
//                     onClick={() =>
//                       this.setState({
//                         focusedSelf: false,
//                         mapCenter: i.geometry.coordinates as [number, number],
//                       })
//                     }
//                   />
//                 ))} */}
//             </Layer>
//             <Layer
//               type="circle"
//               paint={{
//                 "circle-color": "#FF0000",
//                 "circle-radius": 16,
//                 "circle-opacity": 0.8,
//               }}
//             >
//               {this.state.data.features
//                 .filter((i) => i.properties.inDanger)
//                 .map((i) => (
//                   <Feature
//                     coordinates={i.geometry.coordinates}
//                     onClick={() =>
//                       this.setState({
//                         focusedSelf: false,
//                         mapCenter: i.geometry.coordinates as [number, number],
//                       })
//                     }
//                   />
//                 ))}
//             </Layer>
//           </Map>
//           {/* <div className="isInDanger">
//           {isInDanger && <h1 style={{ color: "#F00" }}>In Danger Zone!!!</h1>}
//         </div> */}
//           <div
//             className="flex-center darkPopUpContainer"
//             style={{
//               width: isMobile ? "100%" : "40%",
//               height: MAP_HEIGHT,
//               left: this.state.workerTabToggled ? "0%" : "-150%",
//               minWidth: "300px",
//             }}
//           >
//             <div
//               className="menuContainerInDarkPopUp"
//               onClick={() => {
//                 this.setState({ workerTabToggled: false });
//               }}
//             >
//               <MenuIcon
//                 isOpen={this.state.workerTabToggled}
//                 setIsOpen={(value) =>
//                   this.setState({ workerTabToggled: value })
//                 }
//                 bgColor={"transparent"}
//               />
//               <div style={{ width: "8px" }} />
//             </div>
//             {/* Check isMobile here */}
//             <ModalContent
//               icon={this.state.modal?.icon}
//               topic={this.state.modal?.topic ? this.state.modal?.topic : ""}
//               workerInfo={{
//                 staffId: this.state.popUp?.id ?? "",
//                 staffName: this.state.popUp?.name ?? "",
//                 temperature: this.state.popUp?.temperature ?? "",
//               }}
//             />
//             <section
//               className="flex-center"
//               style={{ marginTop: "32px", cursor: "pointer" }}
//               onClick={() =>
//                 this.setState({
//                   workerTabToggled: false,
//                   secondModalIsOpen: true,
//                 })
//               }
//             >
//               <h4 style={{ margin: 0, width: "fit-content", color: "#EEE" }}>
//                 員工資料及聯絡
//               </h4>
//               <div className="flex-center" style={{ marginLeft: "8px" }}>
//                 <RightArrowIcon />
//               </div>
//             </section>
//           </div>
//           <div
//             className="flex-center darkPopUpContainer"
//             style={{
//               width: isMobile ? "100%" : "40%",
//               height: MAP_HEIGHT,
//               right: this.state.secondModalIsOpen ? "0%" : "-150%",
//               minWidth: "300px",
//               borderRadius: "16px 0px 0px 16px",
//             }}
//           >
//             <div
//               className="menuContainerInDarkPopUp"
//               onClick={() => {
//                 this.setState({ secondModalIsOpen: false });
//               }}
//             >
//               <MenuIcon
//                 isOpen={this.state.secondModalIsOpen}
//                 setIsOpen={(value) =>
//                   this.setState({ secondModalIsOpen: value })
//                 }
//                 bgColor={"transparent"}
//               />
//               <div style={{ width: "8px" }} />
//             </div>
//             {/* Check isMobile here */}
//             <SecondModalContent
//               workerInfo={{
//                 staffId: this.state.popUp?.id ?? "",
//                 staffName: this.state.popUp?.name ?? "",
//                 temperature: this.state.popUp?.temperature ?? "",
//               }}
//             />
//           </div>
//           {this.state.isInDanger && (
//             <div
//               onClick={() => this.exitFromDanger()}
//               style={{
//                 display: "flex",
//                 justifyContent: "center",
//                 alignItems: "center",
//                 width: "100%",
//               }}
//             >
//               <div
//                 style={{
//                   color: "#EEE",
//                   fontSize: "18px",
//                   padding: "4px 24px",
//                   background: "#306ef4",
//                   borderRadius: "4px",
//                   marginTop: "40px",
//                   cursor: "pointer",
//                 }}
//               >
//                 解除
//               </div>
//             </div>
//           )}
//         </div>
//         <div
//           onClick={() => {
//             this.setToDanger();
//             // this.setStayStill();
//           }}
//         ></div>
//       </div>
//     );
//   }
// }
// export default App;